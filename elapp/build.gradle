apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply plugin: 'com.growingio.android'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.hooview.app"
        multiDexEnabled true
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 12
        versionName "2.1.1"

        resValue "string", "build_time", buildTime()
        resValue("string", "growingio_project_id", "a9d9a45702edf729")
        resValue("string", "growingio_url_scheme", "growing.dd4ec50c87debcfb")

        ndk {
            abiFilters "armeabi", "armeabi-v7a"
        }
        renderscriptSupportModeEnabled true
    }
    useLibrary 'org.apache.http.legacy'  // TODO Need to remove this.
    // Exclude unneeded files
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    // productFlavors
    productFlavors {
        def path = "channel.txt"
        file(path).eachLine { line ->
            def words = line.split(':')
            def channel = words[0]
            def umengKey = words[1]
            if (channel == '') {
                channel = umengKey
            }
            def name = channel
            "$name" {
                manifestPlaceholders = [CHANNEL_VALUE: channel, UMENG_KEY_VALUE: umengKey]
            }
        }
    }
    signingConfigs {
        release
        debug
    }
    // signing
    def propFile = file('./android.keystore.properties')
    if (propFile.canRead()) {
        def Properties p = new Properties()
        p.load(new FileInputStream(propFile))

        if (p != null
                && p.containsKey('STORE_FILE')
                && p.containsKey('STORE_PASSWORD')
                && p.containsKey('KEY_ALIAS')
                && p.containsKey('KEY_PASSWORD')) {
            println "RELEASE_BUILD: Signing..."

            android.signingConfigs.release.storeFile = file(p['STORE_FILE'])
            android.signingConfigs.release.storePassword = p['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = p['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = p['KEY_PASSWORD']

        } else {
            println "RELEASE_BUILD: Required properties in signing.properties are missing"
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println "RELEASE_BUILD: signing.properties not found"
        android.buildTypes.release.signingProperties = null
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            signingConfig signingConfigs.release
        }
        release {
            debuggable false
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    lintOptions {
        abortOnError false
    }
    applicationVariants.all { variant ->
        def outputFile = variant.outputs[0].outputFile;
        if (outputFile != null && outputFile.name.endsWith('.apk')) {
            def fileName = "elapp-${variant.productFlavors[0].name}-V${defaultConfig.versionName}-${variant.buildType.name}.apk"
            variant.outputs[0].outputFile = new File(outputFile.parent, fileName)
        }
    }
    dexOptions {
        maxProcessCount 4
        javaMaxHeapSize "2g"
        preDexLibraries = false
    }
}

def buildTime() {
    return new Date().format("yyyy-MM-dd HH:mm:ss")
}

repositories {
    flatDir { dirs 'libs' }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile(name: 'videoprp', ext: 'aar')
    compile project(':ShareLogin')
    compile project(':ViewPageIndicator')
    compile project(':EmojiKeyboard')
    compile project(':Feedback')
    compile project(':ImageSlider')
    compile project(':BottomSheet')
    compile project(':CustomView')
    compile project(':Gift')
//    compile project(':EasyChat')
    compile 'com.easyvaas.sdk:evcore:1.0.23'
    compile 'com.easyvaas.sdk:evlive:1.0.26'
    compile 'com.easyvaas.sdk:evmessage:1.0.16'
    compile 'com.easyvaas.sdk:evplayer:1.0.14'
    compile 'com.android.support:support-v4:' + rootProject.ext.supportLibVersion
    compile 'com.android.support:appcompat-v7:' + rootProject.ext.supportLibVersion
    compile 'com.android.support:cardview-v7:' + rootProject.ext.supportLibVersion
    compile 'com.android.support:design:'+ rootProject.ext.supportLibVersion
    compile 'com.android.support:recyclerview-v7:' + rootProject.ext.supportLibVersion
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.netflix.rxjava:rxjava-core:0.20.7'
    compile 'com.netflix.rxjava:rxjava-android:0.20.7'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.github.lzyzsd:jsbridge:1.0.4'
    compile 'com.nex3z:flow-layout:0.1.3'
    compile 'com.squareup.okhttp3:logging-interceptor:3.5.0'
    compile 'com.growingio.android:vds-android-agent:0.9.103@aar'
}
