apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'

    defaultConfig {
        applicationId "com.hooview.app"
        multiDexEnabled true
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 6
        versionName "1.0.6.0925";

        resValue "string", "build_time", buildTime()

        ndk {
            abiFilters "armeabi", "armeabi-v7a"
        }
        renderscriptSupportModeEnabled true
    }
    useLibrary 'org.apache.http.legacy'  // TODO Need to remove this.
    // Exclude unneeded files
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    // productFlavors
    productFlavors {
        def path = "channel.txt"
        file(path).eachLine { line ->
            def words = line.split(':')
            def channel = words[0]
            def umengKey = words[1]
            def name = channel
            "$name" {
                manifestPlaceholders = [CHANNEL_VALUE: channel, UMENG_KEY_VALUE: umengKey]
            }
        }
    }
    signingConfigs {
        release
        debug
    }
    // signing
    def propFile = file('./android.keystore.properties')
    if (propFile.canRead()) {
        def Properties p = new Properties()
        p.load(new FileInputStream(propFile))

        if (p != null
                && p.containsKey('STORE_FILE')
                && p.containsKey('STORE_PASSWORD')
                && p.containsKey('KEY_ALIAS')
                && p.containsKey('KEY_PASSWORD')) {
            println "RELEASE_BUILD: Signing..."

            android.signingConfigs.release.storeFile = file(p['STORE_FILE'])
            android.signingConfigs.release.storePassword = p['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = p['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = p['KEY_PASSWORD']

        } else {
            println "RELEASE_BUILD: Required properties in signing.properties are missing"
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println "RELEASE_BUILD: signing.properties not found"
        android.buildTypes.release.signingProperties = null
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            signingConfig signingConfigs.release
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    lintOptions {
        abortOnError false
    }
    applicationVariants.all { variant ->
        def outputFile = variant.outputs[0].outputFile;
        if (outputFile != null && outputFile.name.endsWith('.apk')) {
            def fileName = "elapp-${variant.productFlavors[0].name}-V${defaultConfig.versionName}-${variant.buildType.name}.apk"
            variant.outputs[0].outputFile = new File(outputFile.parent, fileName)
        }
    }
//    dexOptions {
//        incremental false
//        maxProcessCount 4
//        javaMaxHeapSize "2g"
//        preDexLibraries = false
//    }
}

def buildTime() {
    return new Date().format("yyyy-MM-dd HH:mm:ss")
}

repositories {
    flatDir { dirs 'libs/aar' }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile(name: 'BottomSheet', ext: 'aar')
    compile(name: 'CustomView', ext: 'aar')
    compile(name: 'EasyChat', ext: 'aar')
    compile(name: 'EmojiKeyboard', ext: 'aar')
    compile(name: 'Feedback', ext: 'aar')
    compile(name: 'feedbackSdk', ext: 'aar')
    compile(name: 'Gift', ext: 'aar')
    compile(name: 'ImageSlider', ext: 'aar')
    compile(name: 'ShareLogin', ext: 'aar')
    compile(name: 'ViewPageIndicator', ext: 'aar')
    compile 'com.easyvaas.sdk:evcore:1.0.16'
    compile 'com.easyvaas.sdk:evplayer:1.0.8'
    compile 'com.easyvaas.sdk:evlive:1.0.16'
    compile 'com.easyvaas.sdk:evmessage:1.0.13'
    compile 'com.android.support:appcompat-v7:' + rootProject.ext.supportLibVersion
    compile 'com.android.support:support-v4:' + rootProject.ext.supportLibVersion
    compile 'com.android.support:recyclerview-v7:' + rootProject.ext.supportLibVersion
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.netflix.rxjava:rxjava-core:0.20.7'
    compile 'com.netflix.rxjava:rxjava-android:0.20.7'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
}
